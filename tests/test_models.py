from datetime import datetime, timedelta
import unittest
from app import app, db
from app.models import User, Item, Sellerorder, Buyerorder, Report, Review

class EcommerceModelCase(unittest.TestCase):
    
    # configures the app and creates the database, funciton for the tests(required)
    def setUp(self):
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite://'
        db.create_all()

    # tear down function for the database. (required)
    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_password_hashing(self):
        seller = User(username="SellerTest", email="SellerTest@example.com", first_name="SellerFirst", last_name="SellerLast", address="Seller Address", card_number="1111111111111111", security_code="111", is_seller = True)
        seller.set_password('Seller')
        self.assertFalse(seller.check_password('Buyer'))
        self.assertTrue(seller.check_password('Seller'))

    def test_post_item(self):
        seller = User(username="SellerTest", email="SellerTest@example.com", first_name="SellerFirst", last_name="SellerLast", address="Seller Address", card_number="1111111111111111", security_code="111", is_seller = True)
        seller.set_password('Seller')
        db.session.add(seller)
        db.session.commit()
        self.assertEqual(seller.items.all(), [])
        item = Item(item_name = 'Test item', item_description = 'Test description', initial_supply = 10, num_available = 10, seller_id = 1, price = 10.00)
        db.session.add(item)
        db.session.commit()
        self.assertEqual(seller.items.count(), 1)
        self.assertEqual(seller.items.first().item_name, 'Test item')
        self.assertEqual(seller.items.first().item_description, 'Test description')
        self.assertEqual(seller.items.first().initial_supply, 10)
        self.assertEqual(seller.items.first().num_available, 10)
        self.assertEqual(seller.items.first().seller_id, 1)
        self.assertEqual(seller.items.first().price, 10.00)

    def test_cart(self):
        seller = User(username="SellerTest", email="SellerTest@example.com", first_name="SellerFirst", last_name="SellerLast", address="Seller Address", card_number="1111111111111111", security_code="111", is_seller = True)
        seller.set_password('Seller')
        db.session.add(seller)
        db.session.commit()
        item = Item(item_name = 'Test item', item_description = 'Test description', initial_supply = 10, num_available = 10, seller_id = 1, price = 10.00)
        db.session.add(item)
        db.session.commit()
        buyer = User(username="ABuyer", email="ABuyer@example.com", first_name="BuyerFirst", last_name="BuyerLast", address="Buyer Address", card_number="2222222222222222", security_code="222", is_seller = False)
        buyer.set_password("Buyer")  
        db.session.add(buyer)
        db.session.commit()
        self.assertEqual(buyer.in_cart.all(), [])
        self.assertEqual(item.in_cart_of.all(), [])
        buyer.add_to_cart(item)
        db.session.commit()
        self.assertTrue(item in buyer.in_cart)
        self.assertEqual(buyer.in_cart.count(), 1)
        self.assertEqual(item.in_cart_of.count(), 1)
        self.assertEqual(buyer.in_cart.first().item_name, 'Test item')
        self.assertEqual(buyer.in_cart.first().item_description, 'Test description')
        self.assertEqual(buyer.in_cart.first().initial_supply, 10)
        self.assertEqual(buyer.in_cart.first().num_available, 9)
        self.assertEqual(buyer.in_cart.first().seller_id, 1)
        self.assertEqual(buyer.in_cart.first().price, 10.00)
        self.assertEqual(item.in_cart_of.first().username, "ABuyer")
        self.assertEqual(item.in_cart_of.first().id, 2)

        buyer.remove_from_cart(item)
        self.assertFalse(item in buyer.in_cart)
        self.assertEqual(buyer.in_cart.count(), 0)
        self.assertEqual(item.in_cart_of.count(), 0)
        self.assertEqual(item.num_available, 10)

    def test_order(self):
        seller = User(username="SellerTest", email="SellerTest@example.com", first_name="SellerFirst", last_name="SellerLast", address="Seller Address", card_number="1111111111111111", security_code="111", is_seller = True)
        seller.set_password('Seller')
        db.session.add(seller)
        db.session.commit()
        item = Item(item_name = 'Test item', item_description = 'Test description', initial_supply = 10, num_available = 10, seller_id = 1, price = 10.00)
        db.session.add(item)
        db.session.commit()
        buyer = User(username="ABuyer", email="ABuyer@example.com", first_name="BuyerFirst", last_name="BuyerLast", address="Buyer Address", card_number="2222222222222222", security_code="222", is_seller = False)
        buyer.set_password("Buyer")  
        db.session.add(buyer)
        db.session.commit()
        buyer_order = Buyerorder(buyer_id = buyer.id, total = 0)
        seller_order = Sellerorder(seller_id = seller.id, total = 0, buyer_id = buyer.id)
        db.session.add(buyer_order)
        db.session.add(seller_order)
        db.session.commit()
        self.assertEqual(buyer_order.contains.all(), [])
        self.assertEqual(seller_order.contains.all(), [])
        self.assertFalse(item in buyer_order.contains)
        self.assertFalse(item in seller_order.contains)

        buyer_order.add_to_order(item)
        buyer_order.add_supplier(seller)
        seller_order.add_to_order(item)

        self.assertEqual(buyer_order.contains.count(), 1)
        self.assertEqual(seller_order.contains.count(), 1)
        self.assertEqual(buyer_order.contains.first().item_name, 'Test item')
        self.assertEqual(buyer_order.contains.first().item_description, 'Test description')
        self.assertEqual(buyer_order.contains.first().initial_supply, 10)
        self.assertEqual(buyer_order.contains.first().seller_id, 1)
        self.assertEqual(buyer_order.contains.first().price, 10.00)
        self.assertEqual(item.bought_in.first().buyer_id, 2)
        self.assertEqual(seller_order.contains.first().item_name, 'Test item')
        self.assertEqual(seller_order.contains.first().item_description, 'Test description')
        self.assertEqual(seller_order.contains.first().initial_supply, 10)
        self.assertEqual(seller_order.contains.first().seller_id, 1)
        self.assertEqual(seller_order.contains.first().price, 10.00)
        self.assertEqual(item.supplied_in.first().seller_id, 1)
        self.assertEqual(buyer_order.suppliers.count(), 1)
        self.assertEqual(buyer_order.suppliers.first().username, "SellerTest")
        self.assertEqual(buyer_order.suppliers.first().id, 1)
        self.assertEqual(item.num_purchased, 1)

    def test_review(self):
        seller = User(username="SellerTest", email="SellerTest@example.com", first_name="SellerFirst", last_name="SellerLast", address="Seller Address", card_number="1111111111111111", security_code="111", is_seller = True)
        seller.set_password('Seller')
        db.session.add(seller)
        db.session.commit()
        item = Item(item_name = 'Test item', item_description = 'Test description', initial_supply = 10, num_available = 10, seller_id = 1, price = 10.00)
        db.session.add(item)
        db.session.commit()
        buyer = User(username="ABuyer", email="ABuyer@example.com", first_name="BuyerFirst", last_name="BuyerLast", address="Buyer Address", card_number="2222222222222222", security_code="222", is_seller = False)
        buyer.set_password("Buyer")  
        db.session.add(buyer)
        db.session.commit()
        review = Review(title = 'Test review', body = 'This is a test review for a test item!', rating = 4)
        db.session.add(review)
        db.session.commit()

        #self.assertEqual(review.item_id, item.id)
        #self.assertEqual(review.user_id, buyer.id)
        self.assertEqual(review.title, 'Test review')
        self.assertEqual(review.body, 'This is a test review for a test item!')
        self.assertEqual(review.rating, 4)

        self.assertEqual(item.reviews.all(), [])
        self.assertEqual(buyer.reviews.all(), [])
        self.assertFalse(review in item.reviews)
        self.assertFalse(review in buyer.reviews)
        review.add_review(buyer, item)

        self.assertEqual(item.reviews.count(), 1)
        self.assertEqual(buyer.reviews.count(), 1)
        self.assertEqual(item.reviews.first().title, 'Test review')
        self.assertEqual(item.reviews.first().body, 'This is a test review for a test item!')
        self.assertEqual(item.reviews.first().item_id, item.id)
        self.assertEqual(item.reviews.first().user_id, buyer.id)
        self.assertEqual(item.reviews.first().rating, 4)

        self.assertEqual(buyer.reviews.first().title, 'Test review')
        self.assertEqual(buyer.reviews.first().body, 'This is a test review for a test item!')
        self.assertEqual(buyer.reviews.first().item_id, item.id)
        self.assertEqual(buyer.reviews.first().user_id, buyer.id)
        self.assertEqual(buyer.reviews.first().rating, 4)

        self.assertEqual(seller.items.first().reviews.first().title, 'Test review')
        self.assertEqual(seller.items.first().reviews.first().body, 'This is a test review for a test item!')
        self.assertEqual(seller.items.first().reviews.first().item_id, item.id)
        self.assertEqual(seller.items.first().reviews.first().user_id, buyer.id)
        self.assertEqual(seller.items.first().reviews.first().rating, 4)

    def test_report(self):
        seller = User(username="SellerTest", email="SellerTest@example.com", first_name="SellerFirst", last_name="SellerLast", address="Seller Address", card_number="1111111111111111", security_code="111", is_seller = True)
        seller.set_password('Seller')
        db.session.add(seller)
        db.session.commit()
        buyer = User(username="ABuyer", email="ABuyer@example.com", first_name="BuyerFirst", last_name="BuyerLast", address="Buyer Address", card_number="2222222222222222", security_code="222", is_seller = False)
        buyer.set_password("Buyer")  
        db.session.add(buyer)
        db.session.commit()
        report = Report(body = 'This is a test report for a test seller!')
        db.session.add(report)
        db.session.commit()

        self.assertEqual(report.body, 'This is a test report for a test seller!')

        self.assertEqual(seller.reports.all(), [])
        self.assertFalse(report in seller.reports)
        report.add_report(seller, buyer)

        self.assertEqual(seller.reports.count(), 1)

        self.assertEqual(seller.reports.first().username, 'ABuyer')
        self.assertEqual(seller.reports.first().body, 'This is a test report for a test seller!')
        self.assertEqual(seller.reports.first().reported_id, seller.id)

if __name__ == '__main__':
    unittest.main(verbosity=2)
